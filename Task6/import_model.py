import os, sys
import datetime as dt
import pandas as pd
import requests
import json
import gzip
import utils
from warnings import warn

# pd.options.display.col_width = None
pd.options.display.width = None

FOLDER = "SCE"

SOURCE = "https://drpep-sce2.opendata.arcgis.com/maps/SCE2::ica-layer/about"
RELOAD = False

data = dict(hv_circuits="https://drpep-sce2.opendata.arcgis.com/datasets/SCE2::ica-layer?layer=4",
            substations="https://drpep-sce2.opendata.arcgis.com/datasets/SCE2::ica-layer?layer=0",
            # mv_circuits="https://drpep-sce2.opendata.arcgis.com/datasets/SCE2::ica-layer?layer=1",
            # lv_circuits="https://drpep-sce2.opendata.arcgis.com/datasets/SCE2::ica-layer?layer=2",
            # ram_circuits="https://drpep-sce2.opendata.arcgis.com/datasets/SCE2::ica-layer?layer=3",
            )
geo = {}

for file,url in data.items():

    filename = os.path.join(FOLDER,file+".geojson.gz")
    # if RELOAD or not os.path.exists(filename):
    #     raise Exception(f"Cannot download directly from URL. Open {url} is a browser to download the latest data. Don't forget to compress the data before saving it to the {FOLDER} folder.")

    # data[file] = pd.read_csv(filename)
    with gzip.open(filename.replace(".csv.",".geojson.")) as fh:
        print(f"{filename}...",end="",flush=True)
        data[file] = json.load(fh)
        print("ok")

nodes = {}

def get_location(coordinates,nominal_voltage):
    location = utils.geohash(coordinates[1],coordinates[0],8)
    try:
        node = nodes[location]
        if node['nominal_voltage'] != nominal_voltage:
            warn(f"{nominal_voltage} kV nominal voltage mismatch at '{location}' ({node['nominal_voltage']} kV)")
        node['links'] += 1
    except KeyError:
        node = dict(
            type = "REF" if len(nodes) == 0 else "PQ",
            nominal_voltage=nominal_voltage,
            links=1,
            )
        nodes[location] = node
    return location

with open(FOLDER+".glm","w") as glm:
    glm.write(f"""// generated by {' '.join(sys.argv)} at {dt.datetime.now()}

#option debug

module pypower;

""")

    #
    # Substations
    #
    for item in data["substations"]["features"]:
        prop = item["properties"]
        geom = item["geometry"]["coordinates"]
        Vprimary,Vsecondary = [float(x) for x in prop['SUBSTATION_VOLTAGE'].split()[0].split("/")]
        location = get_location(geom,Vprimary)
        glm.write(f"""object pypower.bus
{{
    name "N_{location}";
    latitude {geom[1]};
    longitude {geom[0]};
    baseKV {Vprimary} kV;
}}
object pypower.bus
{{
    name "S{prop['SUB_TYPE'][0]}_{location}_S";
    latitude {geom[1]};
    longitude {geom[0]};
    baseKV {Vsecondary} kV;
}}
object pypower.branch
{{
    from "N_{location}";
    to "S{prop['SUB_TYPE'][0]}_{location}_S";
    status IN;
    object pypower.transformer 
    {{
        rated_power {prop['PROJECTED_LOAD']*2};
    }};
}}
""")

    #
    # HV network
    #
    glm.write(f"""
//
// High-Voltage circuits
//
""")
    for item in data['hv_circuits']["features"]:
        props = item["properties"]
        nominal_voltage = props['CIRCUIT_VOLTAGE']
        geom = item["geometry"]
        coords = geom['coordinates']
        length = props['Shape__Length']/5280
        if geom['type'] == 'LineString':
            coords = [coords]
        for segment,line in enumerate(coords):
            from_node = "N_"+get_location(line[0],nominal_voltage)
            to_node = "N_"+get_location(line[-1],nominal_voltage)
            if from_node != to_node:
                glm.write(f"""object pypower.branch
{{
    name "HV_{props['CIRCUIT_ID']}_{props['CIRCUIT_NO']}_{segment}";
    // type "{props['CIRCUIT_TYPE_DESC']}"
    from "{from_node}";
    to "{to_node}";
    // length {round(length,2)} miles
    r {round(0.08*length,4)} Ohm;
    x {round(0.8*length,4)} Ohm;
    b {round(1/0.8/length,4)} 1/Ohm;
    status IN;
}}
""")

    for node,values in nodes.items():
        glm.write(f"""object bus
{{
    name "N_{node}";
    type {values['type']};
    Vm 1.0;
    baseKV {values['nominal_voltage']} kV;
    // links {values['links']}
}}
""")
        if values['type'] == "REF":
            glm.write(f"""object gen
{{
    parent "N_{node}";
    name "G_{node}";
    Pmax 100 GVA;
    Qmax 10 GVAr;
    status IN_SERVICE;    
}}
""")


